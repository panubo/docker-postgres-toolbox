#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

[[ "${DEBUG:-}" == 'true' ]] && set -x

# shellcheck source=commands/common.sh
. "$(dirname "${0}")/common.sh"

# Options:
# format sql|custom
# compression gzip|lz4|bz2|zip|none
# dateformat %Y%m%d%H%M%S
# pgdump_args ""
# checksum sha256
# umask 0077
# dest gs://|s3://|file://
# databases ALL

parse_options "${@}"

# TODO: add option to skip owners and acls, --no-owner --no-acl (only required for plain type dumps) or this could be part of pgdump-args
# TODO: add `--save-local DIR` to specify a local directory to keep a local copy as well as uploading to the DEST (don't delete local after upload)
usage() {
    echoerr "Usage: ${0} [GLOBAL_OPTIONS] [OPTIONS] [DATABASE...] DESTINATION"
    global_options
    echoerr ""
    echoerr "Options:"
    echoerr "    --pgdump-args    OPTIONS"
    echoerr "    --aws-args    OPTIONS"
    echoerr "    --format    plain|custom"
    echoerr "    --compression    gzip|lz4|bz2|none"
    echoerr "    --date-format    %Y%m%d%H%M%S"
    echoerr "    --checksum    sha256"
    echoerr "    --umask    0077"
    echoerr "    --skip-globals    skip dumping postgres globals"
    echoerr ""
    echoerr "    DATABASE    database(s) to dump. Will dump all if no databases are specified."
    echoerr "    DESTINATION    Destination to save database dumps to. s3://, gs:// and files are supported."
}

# Pick up the destination parameter, should always be the last parameter based on standard SRC DEST parameter order
if [[ -z "${args[-1]:-}" ]]; then
    echoerr "Destination is not specified."
    usage
    exit 1
fi
dest="${args[-1]}"
unset "args[-1]"

# Set the umask, umask defaults to 0077 to keep files private during db dumping
umask "${umask:-0077}"

date="$(date --utc "+${date_format:-%Y%m%d%H%M%S}")"
# Undocumented feature to allow overriding the date.
# Useful when using offloaded backup so the actual snapshot date can be used.
date="${OVERRIDE_DATE:-${date}}"

case "${dest}" in
    gs://*)
        echo ">> gsutil"
        save_cmd=( "gsutil" "rsync" )
        dest_type="gs"
        ;;
    s3://*)
        echo ">> aws s3"
        save_cmd=( "aws" "${aws_args[@]}" "s3" "sync" "--no-progress" )
        dest_type="s3"
        ;;
    file://*|/*|./*)
        echo ">> file"
        save_cmd=( "ls" )
        dest="${dest#file:\/\/}"
        dest_type="file"
        ;;
    *)
        echoerr "Unknown destination protocol"
        exit 1
        ;;
    esac

cmd_args=( "${pgdump_args[@]}" )
file_ext=()
file_path=( "${dest}" "${date}" )

# TODO: extra pgdump args (somehow break this into an array)
# TODO: extra options for each of the object storage tools, eg server side encryption settings etc
# TODO: implement checksum option (currently locked to sha256)

# Output format and extension
case "${format:-plain}" in
    "plain"|"p")
        file_ext+=( ".sql" )
        cmd_args+=( "--format=plain" )
        ;;
    "custom"|"c")
        file_ext+=( ".dump" )
        cmd_args+=( "--format=custom" )
        ;;
    *)
        echoerr "Unknown format"
        exit 1
        ;;
    esac

# Output compression
case "${compression:-gzip}" in
    "gzip")
        file_ext+=( ".gz" )
        compression_cmd=( "gzip" "--fast" )
        ;;
    "lz4")
        file_ext+=( ".lz4" )
        compression_cmd=( "lz4" "-c" )
        ;;
    "bz2"|"bzip2")
        file_ext+=( ".bz2" )
        compression_cmd=( "bzip2" "-c" )
        ;;
    "zip")
        echoerr "ZIP not implement"
        exit 1
        ;;
    "none")
        compression_cmd=( "cat" )
        ;;
    *)
        echoerr "Unknown compressions method"
        exit 1
        ;;
    esac

# Create a temporary save path
# mkdir uses TMPDIR, if unset set to /var/tmp since /tmp is normally in memory and could be too small for a big database
export TMPDIR="${TMPDIR:-/var/tmp}"
save_path="$(mktemp -d)/"

# Setup the final path to pass to the save cmd
full_path="$(printf "%s/" "${file_path[@]}")"

# If file destination create the directories and reset the temporary save path to the final save path
if [[ "${dest_type}" == "file" ]]; then
    mkdir -p "${full_path}"
    # Reset the save path if file destination
    save_path="${full_path}/"
fi

# Put the file extensions together, dump type and compression type
final_ext="$(printf "%s" "${file_ext[@]}")"

wait_postgres

# Saving a list of all databases as an array
# echo "${skip_databases[@]}"
skip_dbs="$(printf "'%s', " "${skip_databases[@]}")"
mapfile -t all_databases < <( /usr/bin/psql "${connection[@]}" -At -c "SELECT datname FROM pg_database WHERE NOT datistemplate AND datname NOT IN (${skip_dbs} '')" )

echo "All databases:"
echo "${all_databases[*]}"

if [[ "${#args[@]}" -gt 0 ]]; then
    databases=( "${args[@]}" )
else
    databases=( "${all_databases[@]}" )
fi
# TODO: check databases specified on command line exist in database

echo "Databases to dump: ${#databases[@]}"
echo "${databases[*]}"

if [[ "${#databases[@]}" -lt 1 ]]; then
  echo ">> ERROR: no databases to dump but we expected some"
  exit 1
fi

# Save the postgres globals - always sql format
# TODO: this could do with a clean up
if [[ "${skip_globals:-}" != "true" ]]; then
  database="globals"
  # TODO: this may break is compression none is used
  save_dest="${save_path}${database}.sql${file_ext[-1]}"
  echo ">> Saving ${database} to ${save_dest}"
  pg_dumpall "${connection[@]}" --globals-only | "${compression_cmd[@]}" | tee >(sha256sum > /tmp/sha.txt) > "${save_dest}"
  awk "{print \$1 \"  ${database}.sql${file_ext[-1]}\"}" < /tmp/sha.txt | tee -a "${save_path}/CHECKSUM"
fi

# loop over and save the databases
for database in "${databases[@]}"; do
  save_dest="${save_path}${database}${final_ext}"
  echo ">> Saving ${database} to ${save_dest}"
  pg_dump "${connection_no_dbname[@]}" "${cmd_args[@]}" "${database}" | "${compression_cmd[@]}" | tee >(sha256sum > /tmp/sha.txt) > "${save_dest}"
  awk "{print \$1 \"  ${database}${final_ext}\"}" < /tmp/sha.txt | tee -a "${save_path}/CHECKSUM"
done

# Do the upload
# TODO: can we keep the local copy too?
if [[ "${dest_type}" == "file" ]]; then
    ls -l "${full_path}"
else
    echo ">> Uploading to ${full_path}"
    echoerr "${save_cmd[@]}" "${save_path}" "${full_path}"
    "${save_cmd[@]}" "${save_path}" "${full_path}"

    # Clean up the save path if successful and not a file type save
    rm -rf "${save_path}"
fi
