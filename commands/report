#!/usr/bin/env bash
# Runs a series of queries against a database to compare two server

set -euo pipefail
IFS=$'\n\t'

[[ "${DEBUG:-}" == 'true' ]] && set -x

# shellcheck source=commands/common.sh
. "$(dirname "${0}")/common.sh"

parse_options "${@}"

# Use information schema or pg catalog?
# https://www.postgresql.org/message-id/CCB89282FCE1024EA3DCE687A96A516403895D2B@ehost010-6.exch010.intermedia.net

PSQL=( "/usr/bin/psql" "${connection[@]}" "-P" "pager=off" )

if [[ -n "${args[0]:-}" ]]; then
	PSQL+=( "--dbname" "${args[0]}" )
fi

args_string="${args[*]}"
echoerr ">>> Args: ${args_string//$'\n'/ }"

psql_string="${PSQL[*]}"
echoerr ">>> psql: ${psql_string//$'\n'/ }"

echoerr ">> Run ANALYZE"
"${PSQL[@]}" --command 'ANALYZE VERBOSE' >&2

# Exit immediately is turned off since we want the report complete even if there are errors
set +e

echo ">> Client version"
"${PSQL[@]}" --version
echo

echo ">> Server version"
"${PSQL[@]}" -A -t --command 'SELECT version()'
echo

echo ">> Database name"
"${PSQL[@]}" -A -t --command 'SELECT current_database()'
echo

echo ">> Encoding"
"${PSQL[@]}" -A -t --command 'SHOW SERVER_ENCODING'
echo

echo ">> Collate"
"${PSQL[@]}" -A -t --command 'SHOW LC_COLLATE'
echo

echo ">> Ctype"
"${PSQL[@]}" -A -t --command 'SHOW LC_CTYPE'
echo

echo ">> Database owner"
"${PSQL[@]}" -A -t --command 'SELECT u.usename 
FROM pg_catalog.pg_database d 
JOIN pg_catalog.pg_user u on (d.datdba = u.usesysid)
WHERE d.datname = current_database()'
echo

echo ">> Schemas"
"${PSQL[@]}" --command 'SELECT s.schema_name, s.schema_owner
FROM information_schema.schemata s
WHERE s.schema_name NOT IN ('"'"'pg_catalog'"'"', '"'"'information_schema'"'"')'
echo

echo ">> Schema permissions"
"${PSQL[@]}" --command 'SELECT n.nspname, n.nspowner, u.usename, n.nspacl
FROM pg_catalog.pg_namespace n
JOIN pg_catalog.pg_user u on (n.nspowner = u.usesysid)
WHERE n.nspname NOT IN ('"'"'pg_catalog'"'"', '"'"'information_schema'"'"', '"'"'pg_toast'"'"', '"'"'pg_temp_1'"'"', '"'"'pg_toast_temp_1'"'"')'
echo

echo ">> Count schema objects"
# Originally from https://www.dbrnd.com/2017/06/postgresql-script-to-find-the-count-of-objects-for-each-database-schema/
"${PSQL[@]}" --command 'SELECT
	n.nspname as schema_name
	,CASE c.relkind
	   WHEN '"'"'r'"'"' THEN '"'"'table'"'"'
	   WHEN '"'"'v'"'"' THEN '"'"'view'"'"'
	   WHEN '"'"'i'"'"' THEN '"'"'index'"'"'
	   WHEN '"'"'S'"'"' THEN '"'"'sequence'"'"'
	   WHEN '"'"'s'"'"' THEN '"'"'special'"'"'
	END as object_type
	,count(1) as object_count
FROM pg_catalog.pg_class c
LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relkind IN ('"'"'r'"'"','"'"'v'"'"','"'"'i'"'"','"'"'S'"'"','"'"'s'"'"')
AND n.nspname NOT IN ('"'"'pg_catalog'"'"', '"'"'information_schema'"'"')
GROUP BY  n.nspname,
	CASE c.relkind
	   WHEN '"'"'r'"'"' THEN '"'"'table'"'"'
	   WHEN '"'"'v'"'"' THEN '"'"'view'"'"'
	   WHEN '"'"'i'"'"' THEN '"'"'index'"'"'
	   WHEN '"'"'S'"'"' THEN '"'"'sequence'"'"'
	   WHEN '"'"'s'"'"' THEN '"'"'special'"'"'
	END
ORDER BY n.nspname,
	CASE c.relkind
	   WHEN '"'"'r'"'"' THEN '"'"'table'"'"'
	   WHEN '"'"'v'"'"' THEN '"'"'view'"'"'
	   WHEN '"'"'i'"'"' THEN '"'"'index'"'"'
	   WHEN '"'"'S'"'"' THEN '"'"'sequence'"'"'
	   WHEN '"'"'s'"'"' THEN '"'"'special'"'"'
	END;'
echo

echo ">> Schema tables inc owner (table ACLs not reported)"
# TODO: see if we can report table ACLs
# Number of rows in the table. This is only an estimate used by the planner. It is updated by VACUUM, ANALYZE, and a few DDL commands such as CREATE INDEX.
# TODO: do we need to analyze first, is this going to be accurate or too any false positives
# 'ANALYZE VERBOSE;'
"${PSQL[@]}" --command 'SELECT c.relname, n.nspname, u.usename, c.reltuples
FROM pg_catalog.pg_class c
JOIN pg_catalog.pg_namespace n on (c.relnamespace = n.oid)
JOIN pg_catalog.pg_user u on (c.relowner = u.usesysid)
WHERE n.nspname NOT IN ('"'"'information_schema'"'"', '"'"'pg_catalog'"'"')
AND c.relkind = '"'"'r'"'"''

echo ">> Extensions"
"${PSQL[@]}" --command 'SELECT e.extname, e.extversion, u.usename, n.nspname
FROM pg_catalog.pg_extension e
JOIN pg_catalog.pg_user u on (e.extowner = u.usesysid)
JOIN pg_catalog.pg_namespace n on (e.extnamespace = n.oid)
WHERE n.nspname NOT IN ('"'"'pg_catalog'"'"', '"'"'information_schema'"'"')'

echo ">> Indexes"
"${PSQL[@]}" --command 'SELECT tn.nspname as table_schema, t.relname as table, c.relname, n.nspname, u.usename, c.relpages, i.indnatts, i.indisunique, i.indisprimary
FROM pg_catalog.pg_class c
JOIN pg_catalog.pg_namespace n on (c.relnamespace = n.oid)
JOIN pg_catalog.pg_user u on (c.relowner = u.usesysid)
JOIN pg_catalog.pg_index i on (c.oid = i.indexrelid)
JOIN pg_catalog.pg_class t on (i.indrelid = t.oid)
JOIN pg_catalog.pg_namespace tn on (t.relnamespace = tn.oid)
WHERE n.nspname NOT IN ('"'"'information_schema'"'"', '"'"'pg_catalog'"'"', '"'"'pg_toast'"'"')
AND c.relkind = '"'"'i'"'"'
ORDER BY tn.nspname, t.relname, n.nspname, c.relname'

exit
# Get tables for loops
# TABLES="$("${PSQL[@]}" -A -t --command 'SELECT schemaname || '"'"'.'"'"' || tablename
# FROM pg_catalog.pg_tables 
# WHERE schemaname NOT IN ('"'"'information_schema'"'"', '"'"'pg_catalog'"'"') 
# ORDER BY schemaname, tablename')"

# for table in ${TABLES}; do
#   echo "Counting ${table}"
# done
